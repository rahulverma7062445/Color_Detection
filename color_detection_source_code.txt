import argparse
import cv2
import pandas as pd
import numpy as np


#creating an argument parser to take image path from command prompt
parser = argparse.ArgumentParser()

#adding an argument to the parser
parser.add_argument('image',help='Image path')

args = vars(parser.parse_args())

img_path = args['image']

# reading image with the help of opencv
img = cv2.imread(img_path)

#declairing global varibles for further use
r=g=b=x_cord=y_cord=0
clicked=False

#reading csv file with the help of pandas module and giving name to each column
color_index = ['color','color_name','hex_code','R','G','B']

csv = pd.read_csv('colors.csv',names = color_index , header =None)

# function to return the color name with the help of R ,G, B values
def getColorName(R,G,B):
    mini=999999
    for i in range(0,len(csv)):
        
        #calculating distance,how close we are to a color and choosing the mininmum distance color
        dis = abs(R - int(csv.loc[i,'R']))+ abs(G - int(csv.loc[i,'G']))+ abs(B - int(csv.loc[i,'B']))
        if mini>=dis:
            mini = dis
            cname = csv.loc[i,'color_name']
            
    return cname


# function to calculate the R,G,B values along the x,y position of the mouse of that pixel where mouse is double clicked
def draw_function(event,x,y,flags,parameter):
    if event == cv2.EVENT_LBUTTONDBLCLK:
        global r,g,b,x_cord,y_cord,clicked
        clicked=True
        x_cord=x
        y_cord=y
        b,g,r = img[y,x]
        b=int(b)
        g=int(g)
        r=int(r)
        
#creating a image_window in which input image will display
cv2.namedWindow('image')

cv2.setMouseCallback('image',draw_function)

        
# Whenever a double click event occurs, it will update the color name and RGB values on the window.
#Using the cv2.imshow() function, we draw the image on the window.
#When the user double clicks the window, we draw a rectangle and get the color name to draw text on the window using cv2.rectangle and cv2.putText() functions.

while(1):
    cv2.imshow('image',img)
    if clicked:
        #creating a rectangle box in order to show resulting color name and R,G,B values inside it
        #cv2.rectangle(image,startpoint,endpoint,color,thickness)
        cv2.rectangle(img,(20,20),(750,60),(b,g,r),-1)
        
        #creating text to display in the rectangular box 
        text = getColorName(r,g,b)+','+' R='+str(r)+','+' G='+str(g)+','+' B='+str(b)
        
        cv2.putText(img,text,(50,50),2,0.8,(255,255,255),2,cv2.LINE_AA)
        
        #for very light colors text will be displayed in black color
        if (r+g+b)>=600:
            cv2.putText(img,text,(50,50),2,0.8,(0,0,0),2,cv2.LINE_AA)
        clicked=False
        
    #braek the loop when user press 'Esc' key
    if cv2.waitKey(20) & 0xFF == 27:
        break
cv2.destroyAllWindows()




